import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import os
import json
import re

# –¢–æ–∫–µ–Ω –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
API_TOKEN = '8136774944:AAF9HhHax42vnA6ucdpCArAuuRtVyoP9BWs'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

DATA_PATH = 'habit_data.json'

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫")
    markup.add("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è")
    return markup

# –ö–ª–∞—Å—Å Habit –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
class Habit:
    def __init__(self, name, goal, time_of_day):
        self.name = name
        self.goal = goal
        self.time_of_day = time_of_day
        self.completed = 0

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
class HabitTracker:
    def __init__(self):
        self.habits = []
        self.load_habits()

    def add_habit(self, habit):
        self.habits.append(habit)
        self.save_habits()

    def get_habits(self):
        return self.habits

    def remove_habit(self, name):
        self.habits = [habit for habit in self.habits if habit.name != name]
        self.save_habits()

    def save_habits(self):
        with open(DATA_PATH, 'w') as f:
            json.dump([habit.__dict__ for habit in self.habits], f)

    def load_habits(self):
        if os.path.exists(DATA_PATH):
            with open(DATA_PATH, 'r') as f:
                habits_data = json.load(f)
                for habit_data in habits_data:
                    habit = Habit(habit_data['name'], habit_data['goal'], habit_data['time_of_day'])
                    habit.completed = habit_data['completed']
                    self.habits.append(habit)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–∏–≤—ã—á–µ–∫
tracker = HabitTracker()

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
def add_habit(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=main_menu())
    bot.register_next_step_handler(message, process_habit_name)

def process_habit_name(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
    name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:")
    bot.register_next_step_handler(msg, process_habit_goal, name)

def process_habit_goal(message, name):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
    try:
        goal = int(message.text)
        if goal <= 0:
            raise ValueError
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        bot.register_next_step_handler(msg, process_habit_time, name, goal)
    except ValueError:
        bot.send_message(message.chat.id, "‚õî –¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        add_habit(message)

def process_habit_time(message, name, goal):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
    time_of_day = message.text
    if re.match(r'^[0-2][0-9]:[0-5][0-9]$', time_of_day):
        habit = Habit(name, goal, time_of_day)
        tracker.add_habit(habit)
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {goal} –¥–Ω–µ–π –≤ {time_of_day}!", reply_markup=main_menu())
    else:
        msg = bot.send_message(message.chat.id, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú):")
        bot.register_next_step_handler(msg, process_habit_time, name, goal)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫"
@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫")
def list_habits(message):
    habits = tracker.get_habits()
    if habits:
        response = "üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
        for habit in habits:
            response += f"üîπ {habit.name} - –¶–µ–ª—å: {habit.goal} –¥–Ω–µ–π, –í—Ä–µ–º—è: {habit.time_of_day}\n"
        bot.send_message(message.chat.id, response, reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
def delete_habit(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=main_menu())
    bot.register_next_step_handler(message, process_delete_habit)

def process_delete_habit(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
    name = message.text
    tracker.remove_habit(name)
    bot.send_message(message.chat.id, f"üóë –ü—Ä–∏–≤—ã—á–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è")
def return_to_menu(message):
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)